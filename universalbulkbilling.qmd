---
title: "UniversalBulkBilling"
author: "David Fong"
date: "2025-03-11"
format: html
server: shiny
---

## Shiny Documents

This Quarto document is made interactive using Shiny. Interactive documents allow readers to modify parameters and see the results immediately. Learn more about Shiny interactive documents at <https://quarto.org/docs/interactive/shiny/>.

## Setup

```{r}
#| context: setup
#| include: false

# load libraries
library(tibble)
library(plotly)
library(ggplot2)
library(dplyr)
library(rhandsontable)
library(htmlwidgets)
```

## Data

```{r}
#| context: data
#| include: false
#| cache: true
#| cache.extra: !expr file.info("medicarebenefits.csv")$mtime

# read Medicare Benefit Schedule
#  includes Medicare items, fees, applicable bulk-bill incentives
#  and also default 'raw' numbers of how often the service fee is used
#  
# CSV document
#   required fields
#   -- fee_names : character string
#   -- service_fees : the Medicare Benefit for the service
#   -- service_proportion_raw : the relative numbers for how often the service fee is used
#     the numbers in the default .csv file come from Medicare Benefits Schedule
#     statistics (2024)
#   -- individual_bulkbill_incentive_by_fee : character string, 'single' or 'triple'
service_items <- read.csv("medicarebenefits.csv") |>
  # calculate the proportions
  # for simplicity, assume the same proportions for bulk-billed patients
  # and privately-billed patients
  mutate(
    service_proportion_raw_bulk = service_proportion_raw,
    service_proportion_raw_private = service_proportion_raw
  ) |>
  mutate(
    service_proportion_bulk = service_proportion_raw_bulk/sum(service_proportion_raw_bulk),
    service_proportion_private = service_proportion_raw_private/sum(service_proportion_raw_private)
  ) |>
  select(
    fee_names, service_fees, individual_bulkbill_incentive_by_fee,
    gap_fee,
    service_proportion_bulk, service_proportion_private, 
    service_proportion_raw_bulk, service_proportion_raw_private
  )

# the individual service bulk-bill incentive (dollars)
# varies by location
#   Modified Monash areas 1, 2, 3+4, 5, 6, 7
#   we will index the above to 1, 2, 3, 4, 5 and 6 (merging areas 3+4)

# see https://www9.health.gov.au/mbs/search.cfm
n_monash <- 6 # six different Monash areas
individual_bulkbill_incentive <- array(
  # there are two different individual bulk-billing incentive fees,
  # 'standard' and 'triple'
  data = c(
    # standard bulk-billing incentive applies to service items like item A/'3'
    # items 10990, 10991, 75855, 75856, 75857, 75858
    c(7.15, 10.80, 11.45, 12.20, 12.85, 13.70),
    # triple bulk-billing incentive applies to service items like item B, C and D
    # items 75870, 75871, 75873, 75874, 75875, 75876
    c(21.35, 32.50, 34.50, 36.65, 38.70, 41.10)
  ),
  dim = c(n_monash, 2),
  dimnames = list(c("1", "2", "3+4", "5", "6", "7"), c("single", "triple"))
)

# universal bulk billing incentive
# over the service fee
# set to 12.5%
universal_bulkbill_incentive <- 0.125

fee_mean <- function(
  # calculate the current mean fee
  service_fees,
  fee_names,
  service_proportion_bulk,
  service_proportion_private,
  gap_fee,
  privately_billed,
  individual_bulkbill_incentive,
  individual_bulkbill_incentive_by_fee,
  monash_area
) {
  # calculate individual bulk-bill incentive applicable to defined Monash area
  fee_bulkbill_incentive <- 
    individual_bulkbill_incentive[monash_area, individual_bulkbill_incentive_by_fee]
  # re-define dimensions of the 'x' array
  dim(fee_bulkbill_incentive) <- c(length(fee_names), 1)
  # change row name to the fee names
  rownames(fee_bulkbill_incentive) <- fee_names
  
  privately_billed *
    sum(service_fees * service_proportion_private) +
    (1 - privately_billed) *
    sum(service_fees * service_proportion_bulk) +
    # the calculation above could be simplified, of course!, to
    # sum(service_fees * service_proportion_private), but is kept
    # separate to two different portions to clarify the calculation
    
    # calculate (and add) the individual service bulk-billing incentive applied
    # to patients currently bulk-billed
    (1 - privately_billed) * 
    sum(service_proportion_private * fee_bulkbill_incentive) +
    
    # calculate (and add) the private 'gap' fee
    privately_billed * sum(service_proportion_private * gap_fee)
}

net_benefit <- function(
  # calculate the average net benefit revenue
  # to the practice per patient
  
  # the variable names used in this function
  # are the same as used in previous code chunks
  # but will be 'local' to this function
  service_fees,
  fee_names,
  service_proportion_bulk,
  service_proportion_private,
  gap_fee,
  privately_billed,
  individual_bulkbill_incentive,
  individual_bulkbill_incentive_by_fee,
  monash_area,
  universal_bulkbill_incentive) {
  # calculate individual bulk-bill incentive applicable to defined Monash area
  fee_bulkbill_incentive <- individual_bulkbill_incentive[monash_area, individual_bulkbill_incentive_by_fee]
  # re-define dimensions of the 'x' array
  dim(fee_bulkbill_incentive) <- c(length(fee_names), 1)
  # change row name to the fee names
  rownames(fee_bulkbill_incentive) <- fee_names
  
  # calculate the universal bulk-bill incentive
  # for patients formerly privately-billed
  privately_billed *
    sum(service_fees * service_proportion_private) *
    universal_bulkbill_incentive +
    # calculate (and add) benefit for patients already bulk-billed
    (1 - privately_billed) *
    sum(service_fees * service_proportion_bulk) *
    universal_bulkbill_incentive +
    
    # calculate (and add) the individual service bulk-billing incentive applied
    # to patients formerly privately-billed
    privately_billed * sum(service_proportion_private * fee_bulkbill_incentive) -
    
    # calculate (and subtract) the loss from not charging a private 'gap' fee
    privately_billed * sum(service_proportion_private * gap_fee)
}

```

## Inputs and Outputs

You can embed Shiny inputs and outputs in your document. Outputs are automatically updated whenever inputs change. This demonstrates how a standard R plot can be made interactive:

```{r}

textOutput("mean_fee")

textOutput("myoutput")

selectInput("monash", "Select Monash area", dimnames(individual_bulkbill_incentive)[[1]])

rHandsontableOutput("mbs_table")

```

```{r}
#| context: server

values = reactiveValues(
  service_table = service_items
)

mean_fee = reactive({
  
  fee_mean(
    values[["service_table"]]$service_fees,
    values[["service_table"]]$fee_names,
    values[["service_table"]]$service_proportion_bulk,
    values[["service_table"]]$service_proportion_private,
    values[["service_table"]]$gap_fee,
    values[["service_table"]]$privately_billed,
    values[["service_table"]]$individual_bulkbill_incentive,
    values[["service_table"]]$individual_bulkbill_incentive_by_fee,
    input$monash
  )
})

output$myoutput <- renderText({values[["service_table"]]$fee_names})

output$mean_fee <- renderText({paste("Mean fee: $", mean_fee())})

output$mbs_table = renderRHandsontable({
  DT = NULL
  if (!is.null(input$mbs_table)) {
    DT = hot_to_r(input$mbs_table)
  } else if (!is.null(values[["service_table"]])) {
    DT = values[["service_table"]]
  }
  
  browser()
  if (!is.null(DT))
    rhandsontable(
      DT
    ) |>
    hot_context_menu(
      # cannot change columns
      # (but rows can be added/removed)
      allowColEdit = FALSE
    ) |>
    hot_col(
      col = "individual_bulkbill_incentive_by_fee",
      # only allow two choices
      type = "dropdown", source = c("single", "triple")
    ) |>
    hot_col(
      col = c("service_proportion_bulk", "service_proportion_private"),
      format = "0.00%"
    ) |>
    hot_col(
      c("service_proportion_bulk", "service_proportion_private"),
      readOnly = TRUE
    ) |>
    hot_col(
      col = c(
        "service_fees",
        "service_proportion_raw_bulk", "service_proportion_raw_private"
      ),
      # cannot be negative numbers
      min = 0
    )
})

```
